package com.manuanand.homeservices;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/homeservices/technician") // This means URL's start with /helpdesk (after Application path)
public class TechnicianController {
	@Autowired // This means to get the bean called technicianRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private TechnicianRepository technicianRepository;
	
	@Autowired // This means to get the bean called habitRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private TicketRepository ticketRepository;

	///
	// Technician Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Technician addTechnician (
			@RequestParam String name, @RequestParam String email) { 

		Technician newTechnician = new Technician();
		newTechnician.setName(name);
		newTechnician.setEmail(email);
		
		// Auto-generated fields
		newTechnician.setTicketsResolved(0);
		newTechnician.setCurrentTicket(null);
		
		technicianRepository.save(newTechnician);
		
		return newTechnician;
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<Technician> getTechnicians() {
		
		// This returns a JSON or XML with the users
		return technicianRepository.findAll();
	}
	
	@GetMapping(path="/id")
	public @ResponseBody Technician getTechnicianById(@RequestParam String id) {
		
		Integer technicianId = null;
		try {
			technicianId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Technician> technician = technicianRepository.findById(technicianId);
		if (!technician.isEmpty()) {
			return technician.get();
		} 
		
		return null;
	}
}