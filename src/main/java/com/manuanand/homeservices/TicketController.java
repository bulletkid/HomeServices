package com.manuanand.homeservices;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/homeservices/ticket") // This means URL's start with /helpdesk (after Application path)
public class TicketController {
	@Autowired // This means to get the bean called ticketRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private TicketRepository ticketRepository;

	@Autowired
	private UserRepository userRepository;
	
	///
	// Ticket Repository
	///
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody Ticket addTicket (
			@RequestParam Integer userId, @RequestParam String password,
			@RequestParam String title, @RequestParam String category,
			@RequestParam String description) {
		
		// Validate User
		Optional<User> user = userRepository.findById(userId);
		if (user.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + userId + " not found");
		} 
		
		if (!user.get().getPassword().equalsIgnoreCase(password)) {
			throw new ResponseStatusException(
					  HttpStatus.BAD_REQUEST, "Password mismatched for user with ID" + userId );
		} 

		Ticket newTicket = new Ticket();
		newTicket.setTitle(title);
		newTicket.setCategory(category);
		newTicket.setDescription(description);
		newTicket.setUserId(user.get().getId());
		newTicket.setTechnicianId(null);
		
		// Set auto-generated fields
		newTicket.setCreatedDate(new Date());
		newTicket.setStatus(TicketStatus.CREATED);

		ticketRepository.save(newTicket);
		
		return newTicket;
	}

	@GetMapping(path="/")
	public @ResponseBody Iterable<Ticket> getTickets() {
		
		// This returns a JSON or XML with the users
		return ticketRepository.findAll();
	}
	
	@GetMapping(path="/{id}")
	public @ResponseBody Ticket getTicketById(@PathVariable String id) {
		
		Integer ticketId = null;
		try {
			ticketId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Ticket> ticket = ticketRepository.findById(ticketId);
		if (!ticket.isEmpty()) {
			return ticket.get();
		} 
		
		return null;
	}
}